import { GoogleSpreadsheet } from 'google-spreadsheet';
import fs from 'fs'
import * as dotenv from 'dotenv';
dotenv.config()

const SHEET_ID = process.env.SHEET_ID
// const CREDENTIALS = JSON.parse(process.env.CREDENTIALS)
// const CLIENT_EMAIL = CREDENTIALS.client_email
// const PRIVATE_KEY = CREDENTIALS.private_key.split(String.raw`\n`).join('\n')

const CREDENTIALS = JSON.parse(fs.readFileSync('service_account.json'))

const doc = new GoogleSpreadsheet(SHEET_ID)

await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: CREDENTIALS.client_email,
    private_key: CREDENTIALS.private_key,
});

await doc.loadInfo(); // loads document properties and worksheets
// console.log(doc);
const sheet = doc.sheetsByIndex[0]

const getRows = async () => {
    const rows = await sheet.getRows()
    // console.log(rows);

    for (let index = 0; index < rows.length; index++) {
        const row = rows[index];
        // console.log(row);
        console.log(row.name);
        console.log(row.roll);
    }
}

const addRow = async (rows) => {
    // await sheet.addRows(rows) // append rows


    for (let index = 0; index < rows.length; index++) {
        const row = rows[index];
        // console.log(row);
        await sheet.addRow(row)
        console.log(`added successfully: ${row}`);
    }
}

// addRow([
//     { name: 'ammar', roll: 102 },
//     { name: 'shoaib', roll: 102 },
//     { name: 'umar', roll: 102 },
// ])

const updateRow = async (key, oldValue, newValue) => {
    const rows = await sheet.getRows()
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        if (row[key] === oldValue) {
            rows[i][key] = newValue
            await rows[i].save()
            console.log('updated sucessfully from ', oldValue + 'to' + newValue);

            return
        }
    }
    console.log('value not found: ' + oldValue);
}

// updateRow('name', 'usama', 'owais')
// updateRow('name', 'owais', 'usama')

const deleteRow = async (key, val) => {
    const rows = await sheet.getRows()
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        if (row[key] === val) {
            await rows[i].delete()
            console.log('deleted sucessfully: ', val);
            return
        }
    }
    console.log('value not found: ', val);
}

// deleteRow('name', 'ammar')

//https://theoephraim.github.io/node-google-spreadsheet/#/
//https://www.npmjs.com/package/google-spreadsheet